--------------------------------------------------------------------------------


                                    Idea


This telegram bot offers way to download songs from Spotify playlists.
Downloads are limited to 2 per every-week.

Pending issues:
- Maximum file size is 50 mb. Either have to host server to start telegram bot api server,
or find other way.
- This is not async version, so it can't wait for first request to finish, before starting
to execute next request. So this project is not in production yet.
- There should be some limit to reduce risk of too much msgs sent.

--------------------------------------------------------------------------------


                                  Libaries


To obtain this functionality next external libraries are used:
(Note - all versions required are listed in requirements.txt,
to install all use   pip install -r requirements.txt,
if updated, use      pip freeze > requirements.txt)


1. dotenv [Docs](https://pypi.org/project/python-dotenv)

2. pyTelegramBotAPI [Docs](https://pypi.org/project/pyTelegramBotAPI/)

3. spotipy [Docs](https://pypi.org/project/spotipy/)
   Note: modifications were made to this library. Refer to docs_functionality.

4. pytube [Docs](https://pypi.org/project/pytube/)

5. mutagen [Docs](https://pypi.org/project/mutagen/)

6. mysqlclient [Docs](https://pypi.org/project/mysqlclient/)

7. sshtunnel [Docs](https://pypi.org/project/sshtunnel/)


    requirements.txt

    To install all required dependancies, activate your virtualenv,
    and write next command: pip install -r requirements.txt (or path to requirements.txt file)

    To update and overwrite use: pip freeze > requirements.txt
    To append new packages use: pip freeze >> requirements.txt

--------------------------------------------------------------------------------


                                    Logic


a) Ask for a link to user playlist.
b) Create list of all song names from it.
c) Get URL of first video with song name that popped in YouTube search.
d) Download mp4 audio stream of that video into a freshly created folder.
e) Repeat c-d for each song name in a list.
f) Create ZIP-file with all downloaded songs inside.
g) Send this file to the user of Telegram Bot.
h) Delete all downloaded files and folder to optimize storage.

--------------------------------------------------------------------------------


                              Files description


telegram_bot.py          - main file for running telegram bot.
settings.py              - imported into main file to load environmental variables.
downloader.py            - functionality to download files and create archive.
database_operations.py   - functionality to operate with database.
telegram_bot_messages.py - messages templates for telegram_bot.
.env                     - environmental variables file.
.cache                   - cache file for rcvd spotify tokens.
.gitignore               - gitignore file.
docs_general.txt         - general project documentation.
docs_functionality.txt   - documentation on usage of libraries and functions.
docs_database.txt        - documentation on database management.
docs_server.txt          - documentation on starting local server on remote hosting.
requirements.txt         - pip requirements file.

--------------------------------------------------------------------------------


Tasks to complete:
- delete files if download was unsuccessful or broken infinity polling.
- name playlist file as actual playlist name.
- add protection from too many messages sent.
- add protection from infinite playlists. Maybe limit the playlist size.