INITIAL INSTRUCTIONS TO START:


To start off - register new app at My Dashboard at https://developer.spotify.com
to get the credentials necessary to make authorized calls to Spotify API
(a client id and client secret).
There set rediret URI (here we use https://example.com), it can be any URI.
Then set environmental variables in .env file and proceed with authorization.
After success - .cache file with acess_token and refresh_token is generated.
These tokens are generated automatically by Spotipy, so you won't have to
update your refresh tokens by yourself.
In the context of Spotify's authentication and authorization process,
a refresh token is a token that's used to obtain a new access token.
Access tokens are short-lived tokens that grant access to a user's Spotify
account resources (such as playlists, albums, etc.).
They typically expire after a short period of time to enhance security.

Then obtain a link to a playlist from user message to Bot and format it to a variable playlist_id.
Original address looks like this:
https://open.spotify.com/playlist/6JE9Wqk5pwWMVboQ9GLmuY.
The playlist_id is the code after last slash '6JE9Wqk5pwWMVboQ9GLmuY'.
Regex is used to take out the id from link.
Also, logic applied to filter next conditions: if user sent mroe than one link,
if link is not from open.spotify.com, and if link from open.spotify.com does not contain
playlist id.
Not that both playlists and albums are treated as valid in this application,
so special marker playlist_type is also retrieved from url.

Then request to Spotify API is made, which returns playlist items as dictionary.

The structure of received dictionary with songs data looks like this -
{
    "items": [
        {
            "track1": {
                "artists": [{"name": "Joyner Lucas"}, {"name": "Logic"}],
                "name": "Isis (feat. Logic)"
                }
        }
    ]
}

We iterate over each 'items' dict to get artist names and join
them with song name, then append this combination to a list of songs.


Downloader functions.

Purpose is to get link to a first YouTube video with matching name to song name,
then pass it to download_song function.
The function iterates over each item of list of songs and downloads
audio file of the best quality available to a folder Downloads,
creating another folder with "playlist_id" name.
Download_songs function also creates log.txt automatically,
including utc time of commencment of task,
and each song's result of downloading (success or error).
After downloading of all songs, create_zip function creates zip archive
with all files and log file inside.
After that the file is sent to the chat.



NOTES AND USAGE OF LIBRARIES:

1. dotenv

    Used to load environmental variables from .env file to current environment.
    It looks for a file named .env in the current working dir.
    It reads contents of this file.
    It parses the contents to extract key-value pairs in the format KEY=VALUE.
    It sets these pairs as environmantal variables in current environment.
    After this they are available to use within script os.getenv("NAME_OF_VARIABLE")
    and other methods.


2. pyTelegramBotAPI (telegram_bot.py) - main .py file to run the program.

    Used to operate telegram bot, i.e. send and reply messages, send files etc.
    To operate it and create bot object, it is required to get telegram API token,
    which is done by creating bot with BotFather bot in Telegram.
    Infinity_polling is used to keep bot active. It handles exceptions by itself and continues
    polling if exception occured.
    Important note - telegram supports sending files with next file sizes depending on
    source:
    for local files not more than 50 mbs, for remote URL files links, not more than 20 mbs.
    Where send_document file can accept archive in ZIP format.
    Currently, I am seeking for way to increase size limit.


3. spotipy (downloader.py)

    Used to work with Spotify WEB API via python.
    It requires spotify api credentials: cliend id, client secret, redirect URI.
    After first start, it will send you to authentification page,
    and if successful then
    redirects you to redirect URI (can be any link like https://example.com).
    We use class spotipy.Spotipy(auth_manager=SpotifyOAuth(credentials))
    to authorize our application.
    We use method playlist_items to get dictionary with playlist tracks data.

    There is a limitation by Spotify - we can't get more than 100 items
    in one query for playlist.
    So for ones with more than 100 songs pagination functionality was added.
    The logic behind it as follows:
    - offset and limit can be passed as parameters to playlist data request,
        (not to album as albums are rarely more than 100 songs)
        where offset defines start element of playlist for return query.
        So if 0 passed, it will return songs 0-100, if 100 passed, will return 100-....
    - set offset and limit to 0, 100 respectively.
    - add while loop.
    - after getting data, check if len of playlist_results['items'] is less than 100.
    - if True - break the while loop, playlist was fully received.
    - else, increase offset by limit (offset will be 100) and continue while loop.
    - this way, next playlist dictionary will be received instead of old one.
    - data from this new dictionary will further be appended to same list of songs.

    Info on spotify scopes:
    https://developer.spotify.com/documentation/web-api/concepts/scopes


4. pytube (downloader.py)

    Package pytube was modified by me!
    Path to modified file '\Lib\site-packages\pytube\contrib\search.py'
    - after line 150 in file Search.py added next lines:

    if 'reelShelfRenderer' in video_details:
      continue
    if 'movieRenderer' in video_details:
      continue
    if 'showingResultsForRenderer' in video_details:
    continue

    This was added to avoid exceptions arising,
    when search function catches reels and pay-to-watch movies during its execution.
    (doesn't affect the functionality)
    Issue is well-known, link is here:
    https://github.com/pytube/pytube/issues/1270

    Library is user get YouTube video URL and to download audio from it.

    Use yt_search = Search('str') class and pass song name to it,
    to return an object with search data.
    yt_search.results is list, where each item is a video data object.
    Then item.watch_url method is used:
    return yt_search.results[0].watch_url to get a URL of a first video.

    To download actual audio file create object youtube = YouTube('url')
    Then crete object audio_stream = youtube.streams.get_audio_only()
    This will return the highest quality audio stream object.
    Then use audio_stream.download(file_name, output_path) method
    to download it into output path.


5. mutagen (downloader.py)

    This is a library to update mp4 file metadata.
    In this script update_metadata function it is used to add artist
    name and song name to each file, as
    downloaded YouTube files don't have any info in them.
    Mutagen class MP4 is used to create mp4-file-object:
    audio = MP4(file_path) and perform premutations with it.
    Therefore, while playing file in any audio player -
    artist name and song name will be shown,
    instead of just a filename.


6. mysqlclient + sshtunnel (database_operations.py)
    This is DBMS used to operate database.
    Currently, the bot is hosted at PythonAnywhere service, and it doesn't allow
    connections outside the PythonAnywhere without SSH tunnel.
    So sshtunnel library is also used to create tunnel each time before connection.
    To obtain functionality and create connections, all required credentials are stored
    in .env file. This includes: user, password, host, database; ssh_host, ssh_port,
    ssh_user, ssh_pass.

    These environmental variables are all loaded while importing settings.py file in the
    beginning of telegram_bot.py file. os module is then imported in downloader.py file
    there is no need to import it in the telegram_bot.py.

    Instructions on how to create connection through SSH,
    as well as for mysql-workbench could be found at these links:
    https://www.pythonanywhere.com/user/Your_username/databases/
    https://help.pythonanywhere.com/pages/AccessingMySQLFromOutsidePythonAnywhere/

    In the script connection is created once sent link is validated, and closed after completion
    of downloading operation, or in case no operations occured due to limitations.





Infinity Polling.
This telebot function creates a new Thread and allows the bot to retrieve
Updates automatically and notify listeners and message handlers accordingly.
It automatically manages to create new threads for simultaneusly incoming messages.